---
/**
 * 局部搜索过滤组件 - 使用 Alpine.js
 * 适用于文章列表、标签页等需要实时过滤的场景
 */

interface Props {
  items?: Array<{
    title: string;
    excerpt?: string;
    url?: string;
    tags?: string[];
    date?: string;
  }>;
  placeholder?: string;
  pageSize?: number;
}

const { 
  items = [], 
  placeholder = "搜索文章...", 
  pageSize = 10 
} = Astro.props;
---

<div 
  x-data="searchFilter()" 
  x-init="init()"
  class="search-filter-component"
>
  <!-- 搜索输入区域 -->
  <div class="search-header">
    <div class="search-input-wrapper">
      <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
      
      <input 
        x-model="searchTerm"
        @input="handleSearch"
        @keydown.escape="searchTerm = ''"
        type="text"
        :placeholder="placeholder"
        class="search-input"
        autofocus
      >
      
      <button 
        x-show="searchTerm" 
        @click="clearSearch"
        class="clear-button"
        type="button"
        title="清除搜索"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>
    
    <!-- 搜索统计和高级选项切换 -->
    <div class="search-toolbar">
      <span class="search-stats" x-show="searchTerm">
        找到 <strong x-text="filteredItems.length"></strong> 条结果
        <span x-show="searchTerm.length >= 2" class="search-term">
          关于 "<span x-text="searchTerm"></span>"
        </span>
      </span>
      
      <button 
        @click="showAdvanced = !showAdvanced"
        class="toggle-advanced"
        :class="{ 'active': showAdvanced }"
        type="button"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="4" y1="21" x2="4" y2="14"></line>
          <line x1="4" y1="10" x2="4" y2="3"></line>
          <line x1="12" y1="21" x2="12" y2="12"></line>
          <line x1="12" y1="8" x2="12" y2="3"></line>
          <line x1="20" y1="21" x2="20" y2="16"></line>
          <line x1="20" y1="12" x2="20" y2="3"></line>
        </svg>
        高级筛选
      </button>
    </div>
  </div>

  <!-- 高级过滤选项 -->
  <div 
    x-show="showAdvanced" 
    x-transition
    class="advanced-filters"
  >
    <!-- 标签过滤 -->
    <div class="filter-section" x-show="availableTags.length > 0">
      <label class="filter-label">按标签筛选：</label>
      <div class="tag-filters">
        <template x-for="tag in availableTags" :key="tag">
          <button 
            @click="toggleTag(tag)"
            :class="{ 'active': selectedTags.includes(tag) }"
            class="tag-button"
            x-text="tag"
            type="button"
          ></button>
        </template>
      </div>
    </div>
    
    <!-- 排序选项 -->
    <div class="filter-section">
      <label class="filter-label">排序方式：</label>
      <select x-model="sortBy" @change="currentPage = 1" class="sort-select">
        <option value="relevance">相关度</option>
        <option value="title">标题 A-Z</option>
        <option value="date-desc">最新优先</option>
        <option value="date-asc">最早优先</option>
      </select>
    </div>
  </div>

  <!-- 搜索结果列表 -->
  <div class="search-results">
    <template x-for="(item, index) in paginatedItems" :key="index">
      <article class="result-item">
        <a :href="item.url" class="result-link">
          <h3 class="result-title" x-html="highlightText(item.title)"></h3>
          
          <p 
            x-show="item.excerpt" 
            class="result-excerpt" 
            x-html="highlightText(item.excerpt)"
          ></p>
          
          <div class="result-meta">
            <time 
              x-show="item.date" 
              :datetime="item.date"
              class="result-date"
              x-text="formatDate(item.date)"
            ></time>
            
            <div x-show="item.tags && item.tags.length > 0" class="result-tags">
              <template x-for="tag in item.tags" :key="tag">
                <span class="result-tag" x-text="tag"></span>
              </template>
            </div>
          </div>
        </a>
      </article>
    </template>
    
    <!-- 无结果提示 -->
    <div x-show="filteredItems.length === 0 && searchTerm" class="no-results">
      <svg class="no-results-icon" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
      <p class="no-results-text">
        未找到与 "<strong x-text="searchTerm"></strong>" 相关的结果
      </p>
      <button @click="clearSearch" class="reset-button" type="button">
        清除搜索
      </button>
    </div>
    
    <!-- 空状态 -->
    <div x-show="allItems.length === 0 && !searchTerm" class="empty-state">
      <p>暂无内容</p>
    </div>
  </div>

  <!-- 分页控制 -->
  <nav 
    x-show="totalPages > 1" 
    class="pagination"
    aria-label="搜索结果分页"
  >
    <button 
      @click="currentPage--" 
      :disabled="currentPage === 1"
      class="pagination-button"
      type="button"
      aria-label="上一页"
    >
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="15 18 9 12 15 6"></polyline>
      </svg>
      上一页
    </button>
    
    <span class="pagination-info">
      第 <strong x-text="currentPage"></strong> / <strong x-text="totalPages"></strong> 页
    </span>
    
    <button 
      @click="currentPage++" 
      :disabled="currentPage === totalPages"
      class="pagination-button"
      type="button"
      aria-label="下一页"
    >
      下一页
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="9 18 15 12 9 6"></polyline>
      </svg>
    </button>
  </nav>
</div>

<script define:vars={{ items, pageSize }}>
  function searchFilter() {
    return {
      // 状态
      searchTerm: '',
      selectedTags: [],
      sortBy: 'relevance',
      showAdvanced: false,
      currentPage: 1,
      pageSize: pageSize,
      allItems: items,
      
      // 初始化
      init() {
        // 从 URL 参数读取初始搜索词
        const params = new URLSearchParams(window.location.search);
        const q = params.get('q');
        if (q) {
          this.searchTerm = q;
        }
      },
      
      // 计算属性
      get filteredItems() {
        let results = [...this.allItems];
        
        // 搜索词过滤（标题和摘要）
        if (this.searchTerm && this.searchTerm.length >= 1) {
          const term = this.searchTerm.toLowerCase().trim();
          results = results.filter(item => {
            const title = (item.title || '').toLowerCase();
            const excerpt = (item.excerpt || '').toLowerCase();
            return title.includes(term) || excerpt.includes(term);
          });
        }
        
        // 标签过滤
        if (this.selectedTags.length > 0) {
          results = results.filter(item => {
            if (!item.tags || item.tags.length === 0) return false;
            return this.selectedTags.some(selectedTag => 
              item.tags.includes(selectedTag)
            );
          });
        }
        
        // 排序
        return this.sortResults(results);
      },
      
      get paginatedItems() {
        const start = (this.currentPage - 1) * this.pageSize;
        const end = start + this.pageSize;
        return this.filteredItems.slice(start, end);
      },
      
      get totalPages() {
        return Math.ceil(this.filteredItems.length / this.pageSize);
      },
      
      get availableTags() {
        const tagSet = new Set();
        this.allItems.forEach(item => {
          if (item.tags) {
            item.tags.forEach(tag => tagSet.add(tag));
          }
        });
        return Array.from(tagSet).sort();
      },
      
      // 方法
      handleSearch() {
        this.currentPage = 1; // 搜索时重置到第一页
        this.updateURL();
      },
      
      clearSearch() {
        this.searchTerm = '';
        this.selectedTags = [];
        this.currentPage = 1;
        this.updateURL();
      },
      
      toggleTag(tag) {
        const index = this.selectedTags.indexOf(tag);
        if (index > -1) {
          this.selectedTags.splice(index, 1);
        } else {
          this.selectedTags.push(tag);
        }
        this.currentPage = 1;
      },
      
      sortResults(results) {
        const sorted = [...results];
        switch (this.sortBy) {
          case 'title':
            return sorted.sort((a, b) => 
              (a.title || '').localeCompare(b.title || '', 'zh-CN')
            );
          case 'date-desc':
            return sorted.sort((a, b) => {
              const dateA = a.date ? new Date(a.date).getTime() : 0;
              const dateB = b.date ? new Date(b.date).getTime() : 0;
              return dateB - dateA;
            });
          case 'date-asc':
            return sorted.sort((a, b) => {
              const dateA = a.date ? new Date(a.date).getTime() : 0;
              const dateB = b.date ? new Date(b.date).getTime() : 0;
              return dateA - dateB;
            });
          case 'relevance':
          default:
            return sorted; // 保持原始相关度排序
        }
      },
      
      highlightText(text) {
        if (!this.searchTerm || !text || this.searchTerm.length < 1) {
          return text;
        }
        
        const term = this.searchTerm.trim();
        const regex = new RegExp(`(${this.escapeRegex(term)})`, 'gi');
        return text.replace(regex, '<mark class="highlight">$1</mark>');
      },
      
      escapeRegex(str) {
        return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      },
      
      formatDate(dateStr) {
        if (!dateStr) return '';
        const date = new Date(dateStr);
        return date.toLocaleDateString('zh-CN', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
      },
      
      updateURL() {
        // 更新 URL 参数（可选功能）
        if (this.searchTerm) {
          const url = new URL(window.location.href);
          url.searchParams.set('q', this.searchTerm);
          window.history.replaceState({}, '', url);
        } else {
          const url = new URL(window.location.href);
          url.searchParams.delete('q');
          window.history.replaceState({}, '', url);
        }
      }
    };
  }
</script>

<style>
  .search-filter-component {
    width: 100%;
    max-width: 900px;
    margin: 0 auto;
  }

  /* 搜索头部 */
  .search-header {
    margin-bottom: 1.5rem;
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--theme-bg, #fff);
    border: 2px solid var(--theme-divider, #e5e7eb);
    border-radius: 12px;
    padding: 0.75rem 1rem;
    transition: all 0.2s ease;
  }

  .search-input-wrapper:focus-within {
    border-color: var(--theme-accent, #3b82f6);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .search-icon {
    flex-shrink: 0;
    color: var(--theme-text-light, #6b7280);
  }

  .search-input {
    flex: 1;
    border: none;
    outline: none;
    font-size: 1rem;
    background: transparent;
    color: var(--theme-text, #1f2937);
  }

  .search-input::placeholder {
    color: var(--theme-text-lighter, #9ca3af);
  }

  .clear-button {
    flex-shrink: 0;
    padding: 0.25rem;
    background: transparent;
    border: none;
    cursor: pointer;
    color: var(--theme-text-light, #6b7280);
    border-radius: 4px;
    transition: all 0.2s;
  }

  .clear-button:hover {
    background: var(--theme-bg-offset, #f3f4f6);
    color: var(--theme-text, #1f2937);
  }

  /* 工具栏 */
  .search-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0.75rem;
    gap: 1rem;
  }

  .search-stats {
    font-size: 0.875rem;
    color: var(--theme-text-light, #6b7280);
  }

  .search-stats strong {
    color: var(--theme-accent, #3b82f6);
    font-weight: 600;
  }

  .search-term {
    font-style: italic;
  }

  .toggle-advanced {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: transparent;
    border: 1px solid var(--theme-divider, #e5e7eb);
    border-radius: 8px;
    cursor: pointer;
    font-size: 0.875rem;
    color: var(--theme-text, #1f2937);
    transition: all 0.2s;
  }

  .toggle-advanced:hover {
    background: var(--theme-bg-offset, #f3f4f6);
  }

  .toggle-advanced.active {
    background: var(--theme-accent, #3b82f6);
    color: white;
    border-color: var(--theme-accent, #3b82f6);
  }

  /* 高级过滤 */
  .advanced-filters {
    padding: 1.5rem;
    background: var(--theme-bg-offset, #f9fafb);
    border-radius: 12px;
    margin-bottom: 1.5rem;
  }

  .filter-section {
    margin-bottom: 1rem;
  }

  .filter-section:last-child {
    margin-bottom: 0;
  }

  .filter-label {
    display: block;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--theme-text, #1f2937);
    margin-bottom: 0.5rem;
  }

  .tag-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag-button {
    padding: 0.5rem 1rem;
    background: white;
    border: 1px solid var(--theme-divider, #e5e7eb);
    border-radius: 20px;
    cursor: pointer;
    font-size: 0.875rem;
    color: var(--theme-text, #1f2937);
    transition: all 0.2s;
  }

  .tag-button:hover {
    border-color: var(--theme-accent, #3b82f6);
    color: var(--theme-accent, #3b82f6);
  }

  .tag-button.active {
    background: var(--theme-accent, #3b82f6);
    color: white;
    border-color: var(--theme-accent, #3b82f6);
  }

  .sort-select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--theme-divider, #e5e7eb);
    border-radius: 8px;
    font-size: 0.875rem;
    background: white;
    color: var(--theme-text, #1f2937);
    cursor: pointer;
  }

  /* 搜索结果 */
  .search-results {
    min-height: 200px;
  }

  .result-item {
    margin-bottom: 1rem;
    padding: 1.5rem;
    background: var(--theme-bg, #fff);
    border: 1px solid var(--theme-divider, #e5e7eb);
    border-radius: 12px;
    transition: all 0.2s;
  }

  .result-item:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    border-color: var(--theme-accent-light, #93c5fd);
  }

  .result-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .result-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--theme-text, #1f2937);
    margin: 0 0 0.5rem 0;
    line-height: 1.4;
  }

  .result-excerpt {
    color: var(--theme-text-light, #6b7280);
    font-size: 0.938rem;
    line-height: 1.6;
    margin: 0 0 0.75rem 0;
  }

  .result-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .result-date {
    font-size: 0.813rem;
    color: var(--theme-text-lighter, #9ca3af);
  }

  .result-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .result-tag {
    padding: 0.25rem 0.75rem;
    background: var(--theme-bg-offset, #f3f4f6);
    border-radius: 12px;
    font-size: 0.75rem;
    color: var(--theme-text-light, #6b7280);
  }

  .highlight {
    background-color: #fef08a;
    padding: 0 0.2em;
    border-radius: 3px;
    font-weight: 500;
  }

  /* 无结果 */
  .no-results {
    text-align: center;
    padding: 3rem 1rem;
  }

  .no-results-icon {
    color: var(--theme-text-lighter, #d1d5db);
    margin-bottom: 1rem;
  }

  .no-results-text {
    color: var(--theme-text-light, #6b7280);
    margin-bottom: 1rem;
  }

  .reset-button {
    padding: 0.5rem 1rem;
    background: var(--theme-accent, #3b82f6);
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: all 0.2s;
  }

  .reset-button:hover {
    background: var(--theme-accent-dark, #2563eb);
  }

  /* 空状态 */
  .empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--theme-text-light, #6b7280);
  }

  /* 分页 */
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1.5rem;
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid var(--theme-divider, #e5e7eb);
  }

  .pagination-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    background: white;
    border: 1px solid var(--theme-divider, #e5e7eb);
    border-radius: 8px;
    cursor: pointer;
    font-size: 0.875rem;
    color: var(--theme-text, #1f2937);
    transition: all 0.2s;
  }

  .pagination-button:hover:not(:disabled) {
    background: var(--theme-bg-offset, #f3f4f6);
    border-color: var(--theme-accent, #3b82f6);
  }

  .pagination-button:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  .pagination-info {
    font-size: 0.875rem;
    color: var(--theme-text-light, #6b7280);
  }

  .pagination-info strong {
    color: var(--theme-text, #1f2937);
  }

  /* 响应式 */
  @media (max-width: 640px) {
    .search-toolbar {
      flex-direction: column;
      align-items: flex-start;
    }

    .pagination {
      flex-direction: column;
      gap: 1rem;
    }
  }
</style>

